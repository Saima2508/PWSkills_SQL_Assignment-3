use mavenmovies;

-- 1. **Rank the customers based on the total amount they've spent on rentals.**
SELECT 
    c.customer_id, sum(p.amount) as total_amount , rank() over (order by sum(p.amount) desc)
FROM
    customer c 
left join 
	payment p on c.customer_id = p.customer_id 
group by c.customer_id ;

-- 2. **Calculate the cumulative revenue generated by each film over time.**
with t as (SELECT 
	 f.film_id, r.rental_date, p.amount as total_revenue
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id
         JOIN
    rental  r ON i.inventory_id = r.inventory_id
        JOIN
    payment p ON r.rental_id = p.rental_id
GROUP BY f.film_id, r.rental_id, p.amount)
select film_id, rental_date, total_revenue , sum(total_revenue) over ( partition by film_id order by rental_date) as cumulative_revenue
from t;

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
select film_id, length, rental_duration, avg(rental_duration) over(partition by length) from film;

-- 4. **Identify the top 3 films in each category based on their rental counts.**

with RankedFilms as (
SELECT 
    f.category_id, f.film_id, COUNT(r.rental_id),
    row_number() over(partition by f.category_id order by count(r.rental_id) desc) as ranking
FROM
    film_category f
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r ON i.inventory_id = r.inventory_id
group by f.category_id, f.film_id)

select 
	category_id, film_id, ranking 
from 
	rankedfilms 
where 
	ranking <=3;

-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.**
SELECT 
    c.customer_id, COUNT(r.rental_id), avg(count(r.rental_id)) over (),  (count(r.rental_id) - avg(count(r.rental_id)) over()) as diff_rental_count
FROM
    customer c
        LEFT JOIN
    payment p ON c.customer_id = p.customer_id
        LEFT JOIN
    rental r ON p.rental_id = r.rental_id
GROUP BY c.customer_id
order by c.customer_id;

-- 6. **Find the monthly revenue trend for the entire rental store over time.**
SELECT 
   distinct DATE_FORMAT(payment_date, '%Y-%m') as Date, sum(amount) over (partition by DATE_FORMAT(payment_date, '%Y-%m') order by DATE_FORMAT(payment_date, '%Y-%m')) as monthly_revenue
FROM
    payment  
GROUP BY amount, DATE_FORMAT(payment_date, '%Y-%m');

-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**

select customer_id , total_amount from (
select c.customer_id , sum(p.amount) as total_amount, percent_rank() over(order by sum(p.amount) desc ) as rank_customers
from payment p join customer c on p.customer_id = c.customer_id group by c.customer_id) ranked_customers
where rank_customers <= 0.2;

-- 8. **Calculate the running total of rentals per category, ordered by rental count.**

with t as (SELECT 
       fc.category_id, f.film_id, count(r.rental_id) as rental_count
FROM
    rental r
        JOIN
    inventory i ON r.inventory_id = i.inventory_id
        JOIN
    film_category fc ON i.film_id = fc.film_id
    join 
    film f on fc.film_id = f.film_id
GROUP BY fc.category_id, f.film_id)
select category_id, film_id, rental_count , sum(rental_count) over (partition by category_id order by film_id) as running_total
from t;

-- 9. **Find the films that have been rented less than the average rental count for their respective categories.

select category_id, film_id, rental_count , avg_rental_count from 
(select  f.category_id, f.film_id, count(r.rental_id) as rental_count,  avg(count(r.rental_id)) over( partition by f.category_id) as avg_rental_count
from rental r join inventory i on r.inventory_id = i.inventory_id join film_category f on i.film_id = f.film_id
group by f.category_id, f.film_id) as t1
where rental_count < avg_rental_count;

-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**

select DATE, revenue from 
(select DATE_FORMAT(payment_date, '%Y-%m') as Date, sum(amount) as revenue , rank() over (order by sum(amount) desc) as ranking from payment  group by DATE_FORMAT(payment_date, '%Y-%m')) as t1
where ranking <= 5;

